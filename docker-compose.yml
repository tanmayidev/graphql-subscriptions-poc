services:
  db:
    image: postgres:latest
    ports:
      - "54321:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: example
    healthcheck:
      # This command checks if the database is ready, right on the source db server
      test: ["CMD-SHELL", "pg_isready -d example -U username"]
      interval: 5s
      timeout: 5s
      retries: 5

  notifications-svc-1:
    build: ./notifications-svc
    depends_on:
      # It prevents issuing a request while the server is starting to depend on the healthy status of postgres-db
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://username:password@db:5432/example
      APPLICATION_NAME: NOTIFICATIONS-SVC-1
      PORT: 8080

  notifications-svc-2:
    build: ./notifications-svc
    depends_on:
      # It prevents issuing a request while the server is starting to depend on the healthy status of postgres-db
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://username:password@db:5432/example
      APPLICATION_NAME: NOTIFICATIONS-SVC-2
      PORT: 8080

  notifications-svc-3:
    build: ./notifications-svc
    depends_on:
      # It prevents issuing a request while the server is starting to depend on the healthy status of postgres-db
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://username:password@db:5432/example
      APPLICATION_NAME: NOTIFICATIONS-SVC-3
      PORT: 8080

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - notifications-svc-1
      - notifications-svc-2
      - notifications-svc-3
